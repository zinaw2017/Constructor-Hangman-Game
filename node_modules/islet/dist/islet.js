(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global.Islet = factory(global.React));
}(this, (function (React) { 'use strict';

var React__default = 'default' in React ? React['default'] : React;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};









var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var index = function (WrappedComponent) {
  return function (_Component) {
    inherits(_class, _Component);

    function _class(props) {
      classCallCheck(this, _class);

      var _this = possibleConstructorReturn(this, _Component.call(this, props));

      _this.state = {
        meta: {},
        valueTheMetaIsBeingMaintainedFor: undefined
      };
      return _this;
    }

    _class.prototype.componentDidMount = function componentDidMount() {
      var _this2 = this;

      var _props = this.props,
          value = _props.value,
          metaWillChange = _props.metaWillChange,
          metaDidChange = _props.metaDidChange;

      this.setState(function (state) {
        return _extends({}, state, {
          meta: {},
          valueTheMetaIsBeingMaintainedFor: value
        });
      });
      WrappedComponent.didReceiveValue(value, function (nextMeta) {
        metaWillChange && metaWillChange(nextMeta);
        _this2.setState(function (state) {
          if (value === state.valueTheMetaIsBeingMaintainedFor) {
            return _extends({}, state, {
              meta: nextMeta
            });
          }
          return state;
        }, function () {
          metaDidChange && metaDidChange(nextMeta);
        });
      });
    };

    _class.prototype.componentDidUpdate = function componentDidUpdate() {
      var _this3 = this;

      var value = this.props.value;

      if (value !== this.state.valueTheMetaIsBeingMaintainedFor) {
        this.setState(function (state) {
          return _extends({}, state, {
            meta: {},
            valueTheMetaIsBeingMaintainedFor: value
          });
        });
        WrappedComponent.didReceiveValue(value, function (nextMeta) {
          _this3.setState(function (state) {
            if (value === state.valueTheMetaIsBeingMaintainedFor) {
              return _extends({}, state, {
                meta: nextMeta
              });
            }
            return state;
          });
        });
      }
    };

    _class.prototype.render = function render() {
      return React__default.createElement(WrappedComponent, _extends({}, this.props, {
        // value={this.props.value}
        // setValue={(nextValue) => {
        //   this.props.setValue((nextValue));
        // }}
        meta: this.state.meta
      }));
    };

    return _class;
  }(React.Component);
};

return index;

})));
