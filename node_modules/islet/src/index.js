import React, { Component } from 'react';

export default function (WrappedComponent) {
  return class extends Component {
    constructor(props) {
      super(props);
      this.state = {
        meta: {},
        valueTheMetaIsBeingMaintainedFor: undefined
      };
    }
    componentDidMount() {
      const { value, metaWillChange, metaDidChange } = this.props;
      this.setState((state) => {
        return {
          ...state,
          meta: {},
          valueTheMetaIsBeingMaintainedFor: value
        };
      });
      WrappedComponent.didReceiveValue(value, (nextMeta) => {
        metaWillChange && metaWillChange(nextMeta);
        this.setState((state) => {
          if (value === state.valueTheMetaIsBeingMaintainedFor) {
            return {
              ...state,
              meta: nextMeta
            };
          }
          return state;
        }, () => {
          metaDidChange && metaDidChange(nextMeta);
        });
      });
    }
    componentDidUpdate() {
      const { value } = this.props;
      if (value !== this.state.valueTheMetaIsBeingMaintainedFor) {
        this.setState((state) => {
          return {
            ...state,
            meta: {},
            valueTheMetaIsBeingMaintainedFor: value
          };
        });
        WrappedComponent.didReceiveValue(value, (nextMeta) => {
          this.setState((state) => {
            if (value === state.valueTheMetaIsBeingMaintainedFor) {
              return {
                ...state,
                meta: nextMeta
              };
            }
            return state;
          });
        });
      }
    }
    render() {
      return (
        <WrappedComponent
          {...this.props}
          // value={this.props.value}
          // setValue={(nextValue) => {
          //   this.props.setValue((nextValue));
          // }}
          meta={this.state.meta}
        />
      );
    }
  };
}
